using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Drawing.Printing;
using Computer_Status_Viewer.Models;

namespace Computer_Status_Viewer.Reports
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    /// </summary>
    public class ReportExporter
    {
        private readonly ReportManager _reportManager;

        public ReportExporter(ReportManager reportManager)
        {
            _reportManager = reportManager ?? throw new ArgumentNullException(nameof(reportManager));
        }

        /// <summary>
        /// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –≤ TXT —Ñ–æ—Ä–º–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        /// </summary>
        public void ExportToTxt(Report report, string filePath)
        {
            try
            {
                var content = new StringBuilder();
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
                content.AppendLine("=".PadRight(80, '='));
                content.AppendLine($"–û–¢–ß–Å–¢: {report.Title.ToUpper()}");
                content.AppendLine("=".PadRight(80, '='));
                content.AppendLine();

                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                content.AppendLine("–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
                content.AppendLine("-".PadRight(40, '-'));
                content.AppendLine($"–¢–∏–ø –æ—Ç—á—ë—Ç–∞:     {report.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}");
                content.AppendLine($"–ö–∞—Ç–µ–≥–æ—Ä–∏—è:      {report.ReportType?.Category ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}");
                content.AppendLine($"–°—Ç–∞—Ç—É—Å:         {report.Status}");
                content.AppendLine($"–¢–∏–ø:            {(report.IsAutomatic ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")}");
                content.AppendLine($"–°–æ–∑–¥–∞–Ω:         {report.CreatedDate:dd.MM.yyyy HH:mm:ss}");
                
                if (report.ModifiedDate.HasValue)
                {
                    content.AppendLine($"–ò–∑–º–µ–Ω—ë–Ω:        {report.ModifiedDate.Value:dd.MM.yyyy HH:mm:ss}");
                }
                
                if (!string.IsNullOrEmpty(report.Description))
                {
                    content.AppendLine($"–û–ø–∏—Å–∞–Ω–∏–µ:       {report.Description}");
                }
                
                if (!string.IsNullOrEmpty(report.FilePath))
                {
                    content.AppendLine($"–§–∞–π–ª:           {Path.GetFileName(report.FilePath)}");
                }
                
                content.AppendLine();

                // –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
                var reportData = _reportManager.GetReportData(report.Id);
                if (reportData.Any())
                {
                    content.AppendLine("–î–ê–ù–ù–´–ï –û–¢–ß–Å–¢–ê:");
                    content.AppendLine("=".PadRight(80, '='));
                    content.AppendLine();

                    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    var groupedData = reportData.GroupBy(d => d.Category ?? "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                    
                    foreach (var group in groupedData)
                    {
                        content.AppendLine($"üìÅ {group.Key.ToUpper()}");
                        content.AppendLine("-".PadRight(60, '-'));
                        
                        foreach (var data in group)
                        {
                            content.AppendLine($"  ‚Ä¢ {data.Key}: {data.Value}");
                            if (!string.IsNullOrEmpty(data.DataType))
                            {
                                content.AppendLine($"    –¢–∏–ø: {data.DataType}");
                            }
                            content.AppendLine($"    –í—Ä–µ–º—è: {data.Timestamp:HH:mm:ss}");
                            content.AppendLine();
                        }
                    }
                }
                else
                {
                    content.AppendLine("–î–ê–ù–ù–´–ï –û–¢–ß–Å–¢–ê:");
                    content.AppendLine("-".PadRight(40, '-'));
                    content.AppendLine("–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
                    content.AppendLine();
                }

                // –ü–æ–¥–≤–∞–ª
                content.AppendLine("=".PadRight(80, '='));
                content.AppendLine($"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {DateTime.Now:dd.MM.yyyy HH:mm:ss}");
                content.AppendLine($"SystemGuard-X v1.0");
                content.AppendLine("=".PadRight(80, '='));

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                File.WriteAllText(filePath, content.ToString(), Encoding.UTF8);
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ TXT: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –≤ PDF —Ñ–æ—Ä–º–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        /// </summary>
        public void ExportToPdf(Report report, string filePath)
        {
            try
            {
                // –°–æ–∑–¥–∞—ë–º HTML-–ø–æ–¥–æ–±–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF
                var htmlContent = new StringBuilder();
                
                htmlContent.AppendLine("<!DOCTYPE html>");
                htmlContent.AppendLine("<html lang='ru'>");
                htmlContent.AppendLine("<head>");
                htmlContent.AppendLine("    <meta charset='UTF-8'>");
                htmlContent.AppendLine("    <title>–û—Ç—á—ë—Ç: " + report.Title + "</title>");
                htmlContent.AppendLine("    <style>");
                htmlContent.AppendLine("        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }");
                htmlContent.AppendLine("        .container { background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }");
                htmlContent.AppendLine("        .header { text-align: center; color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 20px; margin-bottom: 30px; }");
                htmlContent.AppendLine("        .title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }");
                htmlContent.AppendLine("        .info-section { margin-bottom: 30px; }");
                htmlContent.AppendLine("        .info-title { font-size: 18px; font-weight: bold; color: #34495e; margin-bottom: 15px; border-left: 4px solid #3498db; padding-left: 10px; }");
                htmlContent.AppendLine("        .info-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }");
                htmlContent.AppendLine("        .info-table td { padding: 8px 12px; border-bottom: 1px solid #ecf0f1; }");
                htmlContent.AppendLine("        .info-table td:first-child { font-weight: bold; color: #2c3e50; width: 200px; }");
                htmlContent.AppendLine("        .data-section { margin-top: 30px; }");
                htmlContent.AppendLine("        .category-header { font-size: 16px; font-weight: bold; color: #2980b9; margin: 20px 0 10px 0; padding: 10px; background-color: #ecf0f1; border-left: 4px solid #3498db; }");
                htmlContent.AppendLine("        .data-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }");
                htmlContent.AppendLine("        .data-table th { background-color: #34495e; color: white; padding: 12px; text-align: left; }");
                htmlContent.AppendLine("        .data-table td { padding: 10px 12px; border-bottom: 1px solid #bdc3c7; }");
                htmlContent.AppendLine("        .data-table tr:nth-child(even) { background-color: #f8f9fa; }");
                htmlContent.AppendLine("        .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 2px solid #ecf0f1; color: #7f8c8d; font-size: 12px; }");
                htmlContent.AppendLine("        .no-data { text-align: center; color: #95a5a6; font-style: italic; padding: 40px; }");
                htmlContent.AppendLine("    </style>");
                htmlContent.AppendLine("</head>");
                htmlContent.AppendLine("<body>");
                htmlContent.AppendLine("    <div class='container'>");
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                htmlContent.AppendLine("        <div class='header'>");
                htmlContent.AppendLine("            <div class='title'>–û–¢–ß–Å–¢: " + report.Title.ToUpper() + "</div>");
                htmlContent.AppendLine("        </div>");
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                htmlContent.AppendLine("        <div class='info-section'>");
                htmlContent.AppendLine("            <div class='info-title'>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>");
                htmlContent.AppendLine("            <table class='info-table'>");
                htmlContent.AppendLine("                <tr><td>–¢–∏–ø –æ—Ç—á—ë—Ç–∞:</td><td>" + (report.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + "</td></tr>");
                htmlContent.AppendLine("                <tr><td>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</td><td>" + (report.ReportType?.Category ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + "</td></tr>");
                htmlContent.AppendLine("                <tr><td>–°—Ç–∞—Ç—É—Å:</td><td>" + report.Status + "</td></tr>");
                htmlContent.AppendLine("                <tr><td>–¢–∏–ø:</td><td>" + (report.IsAutomatic ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π") + "</td></tr>");
                htmlContent.AppendLine("                <tr><td>–°–æ–∑–¥–∞–Ω:</td><td>" + report.CreatedDate.ToString("dd.MM.yyyy HH:mm:ss") + "</td></tr>");
                
                if (report.ModifiedDate.HasValue)
                {
                    htmlContent.AppendLine("                <tr><td>–ò–∑–º–µ–Ω—ë–Ω:</td><td>" + report.ModifiedDate.Value.ToString("dd.MM.yyyy HH:mm:ss") + "</td></tr>");
                }
                
                if (!string.IsNullOrEmpty(report.Description))
                {
                    htmlContent.AppendLine("                <tr><td>–û–ø–∏—Å–∞–Ω–∏–µ:</td><td>" + report.Description + "</td></tr>");
                }
                
                if (!string.IsNullOrEmpty(report.FilePath))
                {
                    htmlContent.AppendLine("                <tr><td>–§–∞–π–ª:</td><td>" + Path.GetFileName(report.FilePath) + "</td></tr>");
                }
                
                htmlContent.AppendLine("            </table>");
                htmlContent.AppendLine("        </div>");
                
                // –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
                var reportData = _reportManager.GetReportData(report.Id);
                if (reportData.Any())
                {
                    htmlContent.AppendLine("        <div class='data-section'>");
                    htmlContent.AppendLine("            <div class='info-title'>üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞</div>");
                    
                    var groupedData = reportData.GroupBy(d => d.Category ?? "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                    
                    foreach (var group in groupedData)
                    {
                        htmlContent.AppendLine("            <div class='category-header'>üìÅ " + group.Key.ToUpper() + "</div>");
                        htmlContent.AppendLine("            <table class='data-table'>");
                        htmlContent.AppendLine("                <thead>");
                        htmlContent.AppendLine("                    <tr>");
                        htmlContent.AppendLine("                        <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>");
                        htmlContent.AppendLine("                        <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>");
                        htmlContent.AppendLine("                        <th>–í—Ä–µ–º—è</th>");
                        htmlContent.AppendLine("                    </tr>");
                        htmlContent.AppendLine("                </thead>");
                        htmlContent.AppendLine("                <tbody>");
                        
                        foreach (var data in group)
                        {
                            htmlContent.AppendLine("                    <tr>");
                            htmlContent.AppendLine("                        <td>" + data.Key + "</td>");
                            htmlContent.AppendLine("                        <td>" + data.Value + "</td>");
                            htmlContent.AppendLine("                        <td>" + data.Timestamp.ToString("HH:mm:ss") + "</td>");
                            htmlContent.AppendLine("                    </tr>");
                        }
                        
                        htmlContent.AppendLine("                </tbody>");
                        htmlContent.AppendLine("            </table>");
                    }
                    
                    htmlContent.AppendLine("        </div>");
                }
                else
                {
                    htmlContent.AppendLine("        <div class='no-data'>");
                    htmlContent.AppendLine("            <div>–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>");
                    htmlContent.AppendLine("        </div>");
                }
                
                // –ü–æ–¥–≤–∞–ª
                htmlContent.AppendLine("        <div class='footer'>");
                htmlContent.AppendLine("            <div>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: " + DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss") + " | SystemGuard-X v1.0</div>");
                htmlContent.AppendLine("        </div>");
                
                htmlContent.AppendLine("    </div>");
                htmlContent.AppendLine("</body>");
                htmlContent.AppendLine("</html>");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ HTML —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF)
                var htmlFilePath = filePath.Replace(".pdf", ".html");
                File.WriteAllText(htmlFilePath, htmlContent.ToString(), Encoding.UTF8);
                
                // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                var instructionsPath = filePath.Replace(".pdf", "_instructions.txt");
                var instructions = new StringBuilder();
                instructions.AppendLine("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–û–ó–î–ê–ù–ò–Æ PDF:");
                instructions.AppendLine("=".PadRight(50, '='));
                instructions.AppendLine();
                instructions.AppendLine("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª " + Path.GetFileName(htmlFilePath) + " –≤ –±—Ä–∞—É–∑–µ—Ä–µ");
                instructions.AppendLine("2. –ù–∞–∂–º–∏—Ç–µ Ctrl+P (–ü–µ—á–∞—Ç—å)");
                instructions.AppendLine("3. –í—ã–±–µ—Ä–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞");
                instructions.AppendLine("4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'");
                instructions.AppendLine();
                instructions.AppendLine("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ:");
                instructions.AppendLine("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã HTML –≤ PDF");
                instructions.AppendLine("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ PDF");
                
                File.WriteAllText(instructionsPath, instructions.ToString(), Encoding.UTF8);
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {ex.Message}", ex);
            }
        }


        /// <summary>
        /// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        /// </summary>
        public void ExportReport(Report report, string filePath, string format)
        {
            if (report == null)
                throw new ArgumentNullException(nameof(report));

            if (string.IsNullOrEmpty(filePath))
                throw new ArgumentException("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(filePath));

            switch (format.ToLower())
            {
                case "txt":
                    ExportToTxt(report, filePath);
                    break;
                case "pdf":
                    ExportToPdf(report, filePath);
                    break;
                default:
                    throw new ArgumentException($"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}");
            }
        }
    }
}

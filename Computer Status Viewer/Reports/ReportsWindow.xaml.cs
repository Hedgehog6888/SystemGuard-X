using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using Computer_Status_Viewer.Models;

namespace Computer_Status_Viewer.Reports
{
    /// <summary>
    /// –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞–º–∏
    /// </summary>
    public partial class ReportsWindow : Window
    {
        private ReportManager _reportManager;
        private Report _selectedReport;
        private AutoReportService _autoReportService;

        public ReportsWindow()
        {
            InitializeComponent();
            _reportManager = new ReportManager();
            _autoReportService = new AutoReportService();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LoadReports();
            UpdateStatistics();
            LoadSettings();
            SetupSettingsEventHandlers();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –≤ –æ–∫–Ω–µ
        /// </summary>
        private void Window_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.F5)
            {
                RefreshReportsButton_Click(sender, e);
                e.Handled = true;
            }
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        private void SetupSettingsEventHandlers()
        {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
            if (AutoCreateSystemReports != null)
                AutoCreateSystemReports.Checked += (s, e) => SaveSettings();
            if (AutoCreateSystemReports != null)
                AutoCreateSystemReports.Unchecked += (s, e) => SaveSettings();
            
            if (AutoCreatePerformanceReports != null)
                AutoCreatePerformanceReports.Checked += (s, e) => SaveSettings();
            if (AutoCreatePerformanceReports != null)
                AutoCreatePerformanceReports.Unchecked += (s, e) => SaveSettings();
            
            if (AutoCreateSecurityReports != null)
                AutoCreateSecurityReports.Checked += (s, e) => SaveSettings();
            if (AutoCreateSecurityReports != null)
                AutoCreateSecurityReports.Unchecked += (s, e) => SaveSettings();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if (ReportIntervalComboBox != null)
                ReportIntervalComboBox.SelectionChanged += (s, e) => 
                {
                    SaveSettings();
                    _autoReportService?.UpdateInterval();
                };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if (AutoExportReports != null)
                AutoExportReports.Checked += (s, e) => SaveSettings();
            if (AutoExportReports != null)
                AutoExportReports.Unchecked += (s, e) => SaveSettings();
            
            if (IncludeChartsInExport != null)
                IncludeChartsInExport.Checked += (s, e) => SaveSettings();
            if (IncludeChartsInExport != null)
                IncludeChartsInExport.Unchecked += (s, e) => SaveSettings();
            
            if (CompressExports != null)
                CompressExports.Checked += (s, e) => SaveSettings();
            if (CompressExports != null)
                CompressExports.Unchecked += (s, e) => SaveSettings();
            
            if (DefaultExportFormatComboBox != null)
                DefaultExportFormatComboBox.SelectionChanged += (s, e) => SaveSettings();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (NotifyOnReportCompletion != null)
                NotifyOnReportCompletion.Checked += (s, e) => SaveSettings();
            if (NotifyOnReportCompletion != null)
                NotifyOnReportCompletion.Unchecked += (s, e) => SaveSettings();
            
            if (NotifyOnReportErrors != null)
                NotifyOnReportErrors.Checked += (s, e) => SaveSettings();
            if (NotifyOnReportErrors != null)
                NotifyOnReportErrors.Unchecked += (s, e) => SaveSettings();
            
            if (ShowReportPreview != null)
                ShowReportPreview.Checked += (s, e) => SaveSettings();
            if (ShowReportPreview != null)
                ShowReportPreview.Unchecked += (s, e) => SaveSettings();
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void LoadReports()
        {
            try
            {
                if (_reportManager == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: ReportManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                    return;
                }

                var reports = _reportManager.GetAllReports();
                if (reports == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç—ã";
                    return;
                }

                if (ReportsListBox != null)
                {
                    ReportsListBox.ItemsSource = reports;
                    // –ù–µ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–æ–≤
                    if (_selectedReport != null)
                    {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        var existingReport = reports.FirstOrDefault(r => r.Id == _selectedReport.Id);
                        if (existingReport != null)
                        {
                            ReportsListBox.SelectedItem = existingReport;
                        }
                    }
                }
                
                if (ReportsCountText != null)
                {
                    ReportsCountText.Text = $"–û—Ç—á—ë—Ç–æ–≤: {reports.Count}";
                }
                
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = "–û—Ç—á—ë—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}";
                }
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void ReportsListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var selectedItems = ReportsListBox?.SelectedItems;
            if (selectedItems != null && selectedItems.Count > 0)
            {
                // –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª–∏
                if (selectedItems.Count == 1 && selectedItems[0] is Report singleReport)
                {
                    _selectedReport = singleReport;
                    ShowReportDetails(singleReport);
                }
                else
                {
                    // –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    ShowMultipleSelectionDetails(selectedItems.Cast<Report>().ToList());
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (DeleteReportButton != null)
                {
                    DeleteReportButton.Visibility = Visibility.Visible;
                    DeleteReportButton.Content = selectedItems.Count == 1 ? 
                        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" : 
                        $"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ({selectedItems.Count})";
                }
                
                // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                if (ExportButton != null)
                    ExportButton.Visibility = selectedItems.Count == 1 ? Visibility.Visible : Visibility.Collapsed;
            }
            else
            {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                if (DeleteReportButton != null)
                    DeleteReportButton.Visibility = Visibility.Collapsed;
                if (ExportButton != null)
                    ExportButton.Visibility = Visibility.Collapsed;
                ShowEmptyDetails();
                _selectedReport = null;
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void ShowReportDetails(Report report)
        {
            try
            {
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Clear();

                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á—ë—Ç–µ
                var mainInfoPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };
                
                var titleBlock = new TextBlock
                {
                    Text = report.Title,
                    FontSize = 18,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };
                mainInfoPanel.Children.Add(titleBlock);

                var descriptionBlock = new TextBlock
                {
                    Text = report.Description ?? "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
                    FontSize = 14,
                    Foreground = System.Windows.Media.Brushes.Gray,
                    Margin = new Thickness(0, 0, 0, 10)
                };
                mainInfoPanel.Children.Add(descriptionBlock);

                var infoGrid = new Grid();
                infoGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                infoGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });

                var leftPanel = new StackPanel();
                var rightPanel = new StackPanel();

                // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                leftPanel.Children.Add(CreateInfoRow("–¢–∏–ø –æ—Ç—á—ë—Ç–∞:", report.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                leftPanel.Children.Add(CreateInfoRow("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", report.ReportType?.Category ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                leftPanel.Children.Add(CreateInfoRow("–°—Ç–∞—Ç—É—Å:", report.Status));
                leftPanel.Children.Add(CreateInfoRow("–¢–∏–ø:", report.IsAutomatic ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"));

                // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                rightPanel.Children.Add(CreateInfoRow("–°–æ–∑–¥–∞–Ω:", report.CreatedDate.ToString("dd.MM.yyyy HH:mm:ss")));
                if (report.ModifiedDate.HasValue)
                {
                    rightPanel.Children.Add(CreateInfoRow("–ò–∑–º–µ–Ω—ë–Ω:", report.ModifiedDate.Value.ToString("dd.MM.yyyy HH:mm:ss")));
                }
                if (!string.IsNullOrEmpty(report.FilePath))
                {
                    rightPanel.Children.Add(CreateInfoRow("–§–∞–π–ª:", Path.GetFileName(report.FilePath)));
                }

                Grid.SetColumn(leftPanel, 0);
                Grid.SetColumn(rightPanel, 1);
                infoGrid.Children.Add(leftPanel);
                infoGrid.Children.Add(rightPanel);

                mainInfoPanel.Children.Add(infoGrid);
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(mainInfoPanel);

                // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞
                LoadReportData(report.Id);
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ç—á—ë—Ç–∞: {ex.Message}";
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void LoadReportData(int reportId)
        {
            try
            {
                var reportData = _reportManager.GetReportData(reportId);
                
                if (reportData.Any())
                {
                    var dataHeader = new TextBlock
                    {
                        Text = "–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞:",
                        FontSize = 16,
                        FontWeight = FontWeights.Bold,
                        Margin = new Thickness(0, 20, 0, 10)
                    };
                    if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(dataHeader);

                    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    var groupedData = reportData.GroupBy(d => d.Category ?? "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                    
                    foreach (var group in groupedData)
                    {
                        var categoryPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 15) };
                        
                        var categoryHeader = new TextBlock
                        {
                            Text = $"üìÅ {group.Key}",
                            FontSize = 14,
                            FontWeight = FontWeights.Medium,
                            Foreground = System.Windows.Media.Brushes.DarkBlue,
                            Margin = new Thickness(0, 0, 0, 5)
                        };
                        categoryPanel.Children.Add(categoryHeader);

                        var dataGrid = new DataGrid
                        {
                            ItemsSource = group.Select(d => new
                            {
                                –ü–∞—Ä–∞–º–µ—Ç—Ä = d.Key,
                                –ó–Ω–∞—á–µ–Ω–∏–µ = d.Value,
                                –¢–∏–ø = d.DataType,
                                –í—Ä–µ–º—è = d.Timestamp.ToString("HH:mm:ss")
                            }).ToList(),
                            AutoGenerateColumns = true,
                            CanUserAddRows = false,
                            CanUserDeleteRows = false,
                            IsReadOnly = true,
                            HeadersVisibility = DataGridHeadersVisibility.Column,
                            GridLinesVisibility = DataGridGridLinesVisibility.Horizontal,
                            AlternatingRowBackground = System.Windows.Media.Brushes.LightGray,
                            RowBackground = System.Windows.Media.Brushes.White,
                            Margin = new Thickness(10, 0, 0, 0)
                        };
                        
                        categoryPanel.Children.Add(dataGrid);
                        if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(categoryPanel);
                    }
                }
                else
                {
                    var noDataText = new TextBlock
                    {
                        Text = "–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                        FontSize = 14,
                        Foreground = System.Windows.Media.Brushes.Gray,
                        FontStyle = FontStyles.Italic,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(noDataText);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞: {ex.Message}";
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        /// </summary>
        private StackPanel CreateInfoRow(string label, string value)
        {
            var panel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 2, 0, 0) };
            
            var labelBlock = new TextBlock
            {
                Text = label,
                FontWeight = FontWeights.Medium,
                Width = 120,
                FontSize = 12
            };
            
            var valueBlock = new TextBlock
            {
                Text = value,
                FontSize = 12,
                Foreground = System.Windows.Media.Brushes.DarkSlateGray
            };
            
            panel.Children.Add(labelBlock);
            panel.Children.Add(valueBlock);
            
            return panel;
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–µ—Ç–∞–ª–∏
        /// </summary>
        private void ShowEmptyDetails()
        {
            if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Clear();
            
            var emptyText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
                FontSize = 14,
                Foreground = System.Windows.Media.Brushes.Gray,
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 0)
            };
            
            if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(emptyText);
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        /// </summary>
        private void ShowMultipleSelectionDetails(List<Report> selectedReports)
        {
            try
            {
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Clear();

                var mainInfoPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };
                
                var titleBlock = new TextBlock
                {
                    Text = $"–í—ã–¥–µ–ª–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {selectedReports.Count}",
                    FontSize = 18,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };
                mainInfoPanel.Children.Add(titleBlock);

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–∞–º
                var automaticCount = selectedReports.Count(r => r.IsAutomatic);
                var customCount = selectedReports.Count(r => !r.IsAutomatic);
                var completedCount = selectedReports.Count(r => r.Status == "–ó–∞–≤–µ—Ä—à—ë–Ω");

                var statsText = new TextBlock
                {
                    Text = $"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö: {automaticCount}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {customCount}\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {completedCount}",
                    FontSize = 14,
                    Foreground = System.Windows.Media.Brushes.Gray,
                    Margin = new Thickness(0, 0, 0, 15)
                };
                mainInfoPanel.Children.Add(statsText);

                // –°–ø–∏—Å–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
                var listHeader = new TextBlock
                {
                    Text = "–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:",
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(0, 10, 0, 5)
                };
                mainInfoPanel.Children.Add(listHeader);

                var reportsList = new StackPanel();
                foreach (var report in selectedReports.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –æ—Ç—á—ë—Ç–æ–≤
                {
                    var reportItem = new TextBlock
                    {
                        Text = $"‚Ä¢ {report.Title} ({report.Status})",
                        FontSize = 12,
                        Margin = new Thickness(10, 2, 0, 2),
                        Foreground = System.Windows.Media.Brushes.DarkSlateGray
                    };
                    reportsList.Children.Add(reportItem);
                }

                if (selectedReports.Count > 10)
                {
                    var moreText = new TextBlock
                    {
                        Text = $"... –∏ –µ—â—ë {selectedReports.Count - 10} –æ—Ç—á—ë—Ç–æ–≤",
                        FontSize = 12,
                        FontStyle = FontStyles.Italic,
                        Margin = new Thickness(10, 2, 0, 2),
                        Foreground = System.Windows.Media.Brushes.Gray
                    };
                    reportsList.Children.Add(moreText);
                }

                mainInfoPanel.Children.Add(reportsList);
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(mainInfoPanel);
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {ex.Message}";
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void ReportsListBox_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.Delete)
            {
                DeleteSelectedReports();
                e.Handled = true;
            }
            else if (e.Key == System.Windows.Input.Key.F5)
            {
                RefreshReportsButton_Click(sender, e);
                e.Handled = true;
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateQuickReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                int reportId = _reportManager.CreateQuickReport();
                if (StatusText != null) StatusText.Text = $"–ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                LoadReports();
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateDetailedReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                int reportId = _reportManager.CreateDetailedReport();
                if (StatusText != null) StatusText.Text = $"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                LoadReports();
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateCustomReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤...";
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
                var criteriaDialog = new CustomReportCriteriaDialog();
                var result = criteriaDialog.ShowDialog();
                
                if (result == true)
                {
                    if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                    
                    var selectedCriteria = criteriaDialog.SelectedCriteria;
                    var reportTitle = criteriaDialog.ReportTitle;
                    var reportDescription = criteriaDialog.ReportDescription;
                    
                    int reportId = _reportManager.CreateCustomReportWithCriteria(
                        reportTitle, 
                        reportDescription, 
                        selectedCriteria,
                        criteriaDialog.AdvancedSettings
                    );
                    
                    if (StatusText != null) StatusText.Text = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                    LoadReports();
                }
                else
                {
                    if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>

        /// <summary>
        /// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void DeleteReportButton_Click(object sender, RoutedEventArgs e)
        {
            DeleteSelectedReports();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
        /// </summary>
        private void RefreshReportsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
                LoadReports();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                UpdateStatistics();
                
                System.Diagnostics.Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}");
            }
        }


        /// <summary>
        /// –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void DeleteSelectedReports()
        {
            var selectedItems = ReportsListBox?.SelectedItems;
            if (selectedItems == null || selectedItems.Count == 0) return;

            var selectedReports = selectedItems.Cast<Report>().ToList();
            var reportTitles = string.Join(", ", selectedReports.Take(3).Select(r => r.Title));
            if (selectedReports.Count > 3)
            {
                reportTitles += $" –∏ –µ—â—ë {selectedReports.Count - 3} –æ—Ç—á—ë—Ç–æ–≤";
            }

            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {selectedReports.Count} –æ—Ç—á—ë—Ç(–æ–≤)?\n\n{reportTitles}\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var deletedCount = 0;
                    var errors = new List<string>();

                    foreach (var report in selectedReports)
                    {
                        try
                        {
                            _reportManager.DeleteReport(report.Id);
                            deletedCount++;
                        }
                        catch (Exception ex)
                        {
                            errors.Add($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è '{report.Title}': {ex.Message}");
                        }
                    }

                    if (deletedCount > 0)
                    {
                        if (StatusText != null) StatusText.Text = $"–£–¥–∞–ª–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {deletedCount}";
                        LoadReports();
                        UpdateStatistics();
                        ShowEmptyDetails();
                        if (DeleteReportButton != null)
                            DeleteReportButton.Visibility = Visibility.Collapsed;
                        if (ExportButton != null)
                            ExportButton.Visibility = Visibility.Collapsed;
                        _selectedReport = null;
                    }

                    if (errors.Any())
                    {
                        var errorMessage = string.Join("\n", errors);
                        MessageBox.Show($"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—á—ë—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:\n{errorMessage}", 
                                      "–û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
                catch (Exception ex)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}";
                    MessageBox.Show($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }


        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        /// </summary>
        private void FilterComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            FilterReports();
        }

        /// <summary>
        /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void FilterReports()
        {
            try
            {
                if (_reportManager == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: ReportManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                    return;
                }

                var allReports = _reportManager.GetAllReports();
                if (allReports == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç—ã";
                    return;
                }

                var filteredReports = allReports.AsEnumerable();


                // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
                var typeFilter = (TypeFilterComboBox?.SelectedItem as ComboBoxItem)?.Content?.ToString();
                if (!string.IsNullOrEmpty(typeFilter))
                {
                    if (typeFilter == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ")
                    {
                        filteredReports = filteredReports.Where(r => r.IsAutomatic);
                    }
                    else if (typeFilter == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ")
                    {
                        filteredReports = filteredReports.Where(r => !r.IsAutomatic);
                    }
                }

                // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var categoryFilter = (CategoryFilterComboBox?.SelectedItem as ComboBoxItem)?.Content?.ToString();
                if (!string.IsNullOrEmpty(categoryFilter) && categoryFilter != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                {
                    filteredReports = filteredReports.Where(r => r.ReportType?.Name == categoryFilter);
                }

                if (ReportsListBox != null)
                {
                    ReportsListBox.ItemsSource = filteredReports.ToList();
                }
                
                if (ReportsCountText != null)
                {
                    ReportsCountText.Text = $"–û—Ç—á—ë—Ç–æ–≤: {filteredReports.Count()}";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}";
            }
        }



        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        /// </summary>
        private void ScrollViewer_PreviewMouseWheel(object sender, System.Windows.Input.MouseWheelEventArgs e)
        {
            var scrollViewer = sender as ScrollViewer;
            if (scrollViewer != null)
            {
                if (e.Delta > 0)
                {
                    scrollViewer.LineUp();
                }
                else
                {
                    scrollViewer.LineDown();
                }
                e.Handled = true;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        /// </summary>
        private void ExportButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedReport == null) return;

            try
            {
                var saveDialog = new Microsoft.Win32.SaveFileDialog
                {
                    Title = "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞",
                    Filter = "PDF —Ñ–∞–π–ª—ã (*.pdf)|*.pdf|–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)|*.txt|HTML —Ñ–∞–π–ª—ã (*.html)|*.html|JSON —Ñ–∞–π–ª—ã (*.json)|*.json|CSV —Ñ–∞–π–ª—ã (*.csv)|*.csv",
                    DefaultExt = "pdf"
                };

                if (saveDialog.ShowDialog() == true)
                {
                    var filePath = saveDialog.FileName;
                    var fileExtension = Path.GetExtension(filePath).ToLower();
                    
                    // –°–æ–∑–¥–∞—ë–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä
                    var exporter = new ReportExporter(_reportManager);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
                    string format;
                    switch (fileExtension)
                    {
                        case ".pdf":
                            format = "pdf";
                            break;
                        case ".txt":
                            format = "txt";
                            break;
                        default:
                            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            MessageBox.Show($"–§–æ—Ä–º–∞—Ç {fileExtension} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF –∏–ª–∏ TXT.", 
                                          "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç", MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                    }

                    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
                    exporter.ExportReport(_selectedReport, filePath, format);
                    
                    if (StatusText != null) StatusText.Text = $"–û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {Path.GetFileName(filePath)}";
                    MessageBox.Show($"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filePath}", "–≠–∫—Å–ø–æ—Ä—Ç", 
                                  MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        /// </summary>
        private void UpdateStatistics()
        {
            try
            {
                if (_reportManager == null)
                {
                    return;
                }

                var allReports = _reportManager.GetAllReports();
                if (allReports == null)
                {
                    return;
                }
                
                if (TotalReportsText != null)
                {
                    TotalReportsText.Text = $"–í—Å–µ–≥–æ –æ—Ç—á—ë—Ç–æ–≤: {allReports.Count}";
                }
                
                if (CompletedReportsText != null)
                {
                    CompletedReportsText.Text = $"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {allReports.Count(r => r.Status == "–ó–∞–≤–µ—Ä—à—ë–Ω")}";
                }
                
                if (CustomReportsText != null)
                {
                    CustomReportsText.Text = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {allReports.Count(r => !r.IsAutomatic)}";
                }
                
                if (TodayReportsText != null)
                {
                    TodayReportsText.Text = $"–°–µ–≥–æ–¥–Ω—è: {allReports.Count(r => r.CreatedDate.Date == DateTime.Today)}";
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞
                if (ReportsChartText != null)
                {
                    var reportTypes = allReports.GroupBy(r => r.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        .Select(g => $"{g.Key}: {g.Count()}")
                        .ToArray();
                    ReportsChartText.Text = string.Join("\n", reportTypes);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}";
                }
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        private void LoadSettings()
        {
            try
            {
                var settings = Properties.Settings.Default;
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
                if (AutoCreateSystemReports != null)
                    AutoCreateSystemReports.IsChecked = settings.AutoCreateSystemReports;
                if (AutoCreatePerformanceReports != null)
                    AutoCreatePerformanceReports.IsChecked = settings.AutoCreatePerformanceReports;
                if (AutoCreateSecurityReports != null)
                    AutoCreateSecurityReports.IsChecked = settings.AutoCreateSecurityReports;
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
                if (ReportIntervalComboBox != null)
                {
                    var interval = settings.ReportInterval;
                    for (int i = 0; i < ReportIntervalComboBox.Items.Count; i++)
                    {
                        var item = ReportIntervalComboBox.Items[i] as ComboBoxItem;
                        if (item?.Content?.ToString() == interval)
                        {
                            ReportIntervalComboBox.SelectedIndex = i;
                            break;
                        }
                    }
                    if (ReportIntervalComboBox.SelectedIndex == -1)
                        ReportIntervalComboBox.SelectedIndex = 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
                if (AutoExportReports != null)
                    AutoExportReports.IsChecked = settings.AutoExportReports;
                if (IncludeChartsInExport != null)
                    IncludeChartsInExport.IsChecked = settings.IncludeChartsInExport;
                if (CompressExports != null)
                    CompressExports.IsChecked = settings.CompressExports;
                
                if (DefaultExportFormatComboBox != null)
                {
                    var format = settings.DefaultExportFormat;
                    for (int i = 0; i < DefaultExportFormatComboBox.Items.Count; i++)
                    {
                        var item = DefaultExportFormatComboBox.Items[i] as ComboBoxItem;
                        if (item?.Content?.ToString() == format)
                        {
                            DefaultExportFormatComboBox.SelectedIndex = i;
                            break;
                        }
                    }
                    if (DefaultExportFormatComboBox.SelectedIndex == -1)
                        DefaultExportFormatComboBox.SelectedIndex = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "TXT"
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (NotifyOnReportCompletion != null)
                    NotifyOnReportCompletion.IsChecked = settings.NotifyOnReportCompletion;
                if (NotifyOnReportErrors != null)
                    NotifyOnReportErrors.IsChecked = settings.NotifyOnReportErrors;
                if (ShowReportPreview != null)
                    ShowReportPreview.IsChecked = settings.ShowReportPreview;
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}";
                }
            }
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        private void SaveSettings()
        {
            try
            {
                var settings = Properties.Settings.Default;
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
                if (AutoCreateSystemReports != null)
                    settings.AutoCreateSystemReports = AutoCreateSystemReports.IsChecked ?? false;
                if (AutoCreatePerformanceReports != null)
                    settings.AutoCreatePerformanceReports = AutoCreatePerformanceReports.IsChecked ?? false;
                if (AutoCreateSecurityReports != null)
                    settings.AutoCreateSecurityReports = AutoCreateSecurityReports.IsChecked ?? false;
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
                if (ReportIntervalComboBox != null && ReportIntervalComboBox.SelectedItem is ComboBoxItem selectedItem)
                    settings.ReportInterval = selectedItem.Content?.ToString() ?? "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ";

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
                if (AutoExportReports != null)
                    settings.AutoExportReports = AutoExportReports.IsChecked ?? false;
                if (IncludeChartsInExport != null)
                    settings.IncludeChartsInExport = IncludeChartsInExport.IsChecked ?? true;
                if (CompressExports != null)
                    settings.CompressExports = CompressExports.IsChecked ?? false;
                
                if (DefaultExportFormatComboBox != null && DefaultExportFormatComboBox.SelectedItem is ComboBoxItem selectedFormat)
                    settings.DefaultExportFormat = selectedFormat.Content?.ToString() ?? "TXT";

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (NotifyOnReportCompletion != null)
                    settings.NotifyOnReportCompletion = NotifyOnReportCompletion.IsChecked ?? true;
                if (NotifyOnReportErrors != null)
                    settings.NotifyOnReportErrors = NotifyOnReportErrors.IsChecked ?? true;
                if (ShowReportPreview != null)
                    settings.ShowReportPreview = ShowReportPreview.IsChecked ?? true;
                
                settings.Save();
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}";
                }
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        /// </summary>
        protected override void OnClosed(EventArgs e)
        {
            _autoReportService?.Stop();
            _autoReportService?.Dispose();
            base.OnClosed(e);
        }

    }
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Computer_Status_Viewer.Models;

namespace Computer_Status_Viewer.Reports
{
    /// <summary>
    /// –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞–º–∏
    /// </summary>
    public partial class ReportsWindow : Window
    {
        private ReportManager _reportManager;
        private Report _selectedReport;

        public ReportsWindow()
        {
            InitializeComponent();
            _reportManager = new ReportManager();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LoadReports();
            UpdateStatistics();
            LoadSettings();
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void LoadReports()
        {
            try
            {
                if (_reportManager == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: ReportManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                    return;
                }

                var reports = _reportManager.GetAllReports();
                if (reports == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç—ã";
                    return;
                }

                if (ReportsListBox != null)
                {
                    ReportsListBox.ItemsSource = reports;
                }
                
                if (ReportsCountText != null)
                {
                    ReportsCountText.Text = $"–û—Ç—á—ë—Ç–æ–≤: {reports.Count}";
                }
                
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = "–û—Ç—á—ë—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}";
                }
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void ReportsListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ReportsListBox?.SelectedItem is Report selectedReport)
            {
                _selectedReport = selectedReport;
                ShowReportDetails(selectedReport);
                if (DeleteReportButton != null)
                    DeleteReportButton.Visibility = Visibility.Visible;
                if (ExportButton != null)
                    ExportButton.Visibility = Visibility.Visible;
            }
            else
            {
                _selectedReport = null;
                ShowEmptyDetails();
                if (DeleteReportButton != null)
                    DeleteReportButton.Visibility = Visibility.Collapsed;
                if (ExportButton != null)
                    ExportButton.Visibility = Visibility.Collapsed;
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void ShowReportDetails(Report report)
        {
            try
            {
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Clear();

                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á—ë—Ç–µ
                var mainInfoPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };
                
                var titleBlock = new TextBlock
                {
                    Text = report.Title,
                    FontSize = 18,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };
                mainInfoPanel.Children.Add(titleBlock);

                var descriptionBlock = new TextBlock
                {
                    Text = report.Description ?? "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
                    FontSize = 14,
                    Foreground = System.Windows.Media.Brushes.Gray,
                    Margin = new Thickness(0, 0, 0, 10)
                };
                mainInfoPanel.Children.Add(descriptionBlock);

                var infoGrid = new Grid();
                infoGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                infoGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });

                var leftPanel = new StackPanel();
                var rightPanel = new StackPanel();

                // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                leftPanel.Children.Add(CreateInfoRow("–¢–∏–ø –æ—Ç—á—ë—Ç–∞:", report.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                leftPanel.Children.Add(CreateInfoRow("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", report.ReportType?.Category ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                leftPanel.Children.Add(CreateInfoRow("–°—Ç–∞—Ç—É—Å:", report.Status));
                leftPanel.Children.Add(CreateInfoRow("–¢–∏–ø:", report.IsAutomatic ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"));

                // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                rightPanel.Children.Add(CreateInfoRow("–°–æ–∑–¥–∞–Ω:", report.CreatedDate.ToString("dd.MM.yyyy HH:mm:ss")));
                if (report.ModifiedDate.HasValue)
                {
                    rightPanel.Children.Add(CreateInfoRow("–ò–∑–º–µ–Ω—ë–Ω:", report.ModifiedDate.Value.ToString("dd.MM.yyyy HH:mm:ss")));
                }
                if (!string.IsNullOrEmpty(report.FilePath))
                {
                    rightPanel.Children.Add(CreateInfoRow("–§–∞–π–ª:", Path.GetFileName(report.FilePath)));
                }

                Grid.SetColumn(leftPanel, 0);
                Grid.SetColumn(rightPanel, 1);
                infoGrid.Children.Add(leftPanel);
                infoGrid.Children.Add(rightPanel);

                mainInfoPanel.Children.Add(infoGrid);
                if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(mainInfoPanel);

                // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞
                LoadReportData(report.Id);
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ç—á—ë—Ç–∞: {ex.Message}";
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void LoadReportData(int reportId)
        {
            try
            {
                var reportData = _reportManager.GetReportData(reportId);
                
                if (reportData.Any())
                {
                    var dataHeader = new TextBlock
                    {
                        Text = "–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞:",
                        FontSize = 16,
                        FontWeight = FontWeights.Bold,
                        Margin = new Thickness(0, 20, 0, 10)
                    };
                    if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(dataHeader);

                    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    var groupedData = reportData.GroupBy(d => d.Category ?? "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                    
                    foreach (var group in groupedData)
                    {
                        var categoryPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 15) };
                        
                        var categoryHeader = new TextBlock
                        {
                            Text = $"üìÅ {group.Key}",
                            FontSize = 14,
                            FontWeight = FontWeights.Medium,
                            Foreground = System.Windows.Media.Brushes.DarkBlue,
                            Margin = new Thickness(0, 0, 0, 5)
                        };
                        categoryPanel.Children.Add(categoryHeader);

                        var dataGrid = new DataGrid
                        {
                            ItemsSource = group.Select(d => new
                            {
                                –ü–∞—Ä–∞–º–µ—Ç—Ä = d.Key,
                                –ó–Ω–∞—á–µ–Ω–∏–µ = d.Value,
                                –¢–∏–ø = d.DataType,
                                –í—Ä–µ–º—è = d.Timestamp.ToString("HH:mm:ss")
                            }).ToList(),
                            AutoGenerateColumns = true,
                            CanUserAddRows = false,
                            CanUserDeleteRows = false,
                            IsReadOnly = true,
                            HeadersVisibility = DataGridHeadersVisibility.Column,
                            GridLinesVisibility = DataGridGridLinesVisibility.Horizontal,
                            AlternatingRowBackground = System.Windows.Media.Brushes.LightGray,
                            RowBackground = System.Windows.Media.Brushes.White,
                            Margin = new Thickness(10, 0, 0, 0)
                        };
                        
                        categoryPanel.Children.Add(dataGrid);
                        if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(categoryPanel);
                    }
                }
                else
                {
                    var noDataText = new TextBlock
                    {
                        Text = "–î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                        FontSize = 14,
                        Foreground = System.Windows.Media.Brushes.Gray,
                        FontStyle = FontStyles.Italic,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(noDataText);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞: {ex.Message}";
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        /// </summary>
        private StackPanel CreateInfoRow(string label, string value)
        {
            var panel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 2, 0, 0) };
            
            var labelBlock = new TextBlock
            {
                Text = label,
                FontWeight = FontWeights.Medium,
                Width = 120,
                FontSize = 12
            };
            
            var valueBlock = new TextBlock
            {
                Text = value,
                FontSize = 12,
                Foreground = System.Windows.Media.Brushes.DarkSlateGray
            };
            
            panel.Children.Add(labelBlock);
            panel.Children.Add(valueBlock);
            
            return panel;
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–µ—Ç–∞–ª–∏
        /// </summary>
        private void ShowEmptyDetails()
        {
            if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Clear();
            
            var emptyText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
                FontSize = 14,
                Foreground = System.Windows.Media.Brushes.Gray,
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 0)
            };
            
            if (ReportDetailsPanel != null) ReportDetailsPanel.Children.Add(emptyText);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateQuickReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                int reportId = _reportManager.CreateQuickReport();
                if (StatusText != null) StatusText.Text = $"–ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                LoadReports();
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateDetailedReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                int reportId = _reportManager.CreateDetailedReport();
                if (StatusText != null) StatusText.Text = $"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                LoadReports();
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void CreateCustomReportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (StatusText != null) StatusText.Text = "–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤...";
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
                var criteriaDialog = new CustomReportCriteriaDialog();
                var result = criteriaDialog.ShowDialog();
                
                if (result == true)
                {
                    if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞...";
                    
                    var selectedCriteria = criteriaDialog.SelectedCriteria;
                    var reportTitle = criteriaDialog.ReportTitle;
                    var reportDescription = criteriaDialog.ReportDescription;
                    
                    int reportId = _reportManager.CreateCustomReportWithCriteria(
                        reportTitle, 
                        reportDescription, 
                        selectedCriteria
                    );
                    
                    if (StatusText != null) StatusText.Text = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! ID: {reportId}";
                    LoadReports();
                }
                else
                {
                    if (StatusText != null) StatusText.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>

        /// <summary>
        /// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        /// </summary>
        private void DeleteReportButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedReport == null) return;

            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç '{_selectedReport.Title}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    _reportManager.DeleteReport(_selectedReport.Id);
                    if (StatusText != null) StatusText.Text = $"–û—Ç—á—ë—Ç '{_selectedReport.Title}' —É–¥–∞–ª—ë–Ω";
                    LoadReports();
                    UpdateStatistics();
                    ShowEmptyDetails();
                    if (DeleteReportButton != null)
                        DeleteReportButton.Visibility = Visibility.Collapsed;
                    if (ExportButton != null)
                        ExportButton.Visibility = Visibility.Collapsed;
                }
                catch (Exception ex)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {ex.Message}";
                    MessageBox.Show($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
        /// </summary>
        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            FilterReports();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        /// </summary>
        private void FilterComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            FilterReports();
        }

        /// <summary>
        /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
        /// </summary>
        private void FilterReports()
        {
            try
            {
                if (_reportManager == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: ReportManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                    return;
                }

                var allReports = _reportManager.GetAllReports();
                if (allReports == null)
                {
                    if (StatusText != null) StatusText.Text = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç—ã";
                    return;
                }

                var filteredReports = allReports.AsEnumerable();

                // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                string searchText = SearchTextBox?.Text?.ToLower() ?? "";
                if (!string.IsNullOrEmpty(searchText))
                {
                    filteredReports = filteredReports.Where(r => 
                        r.Title?.ToLower().Contains(searchText) == true ||
                        r.Description?.ToLower().Contains(searchText) == true ||
                        r.ReportType?.Name?.ToLower().Contains(searchText) == true);
                }

                // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                var statusFilter = (StatusFilterComboBox?.SelectedItem as ComboBoxItem)?.Content?.ToString();
                if (!string.IsNullOrEmpty(statusFilter) && statusFilter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã")
                {
                    filteredReports = filteredReports.Where(r => r.Status == statusFilter);
                }

                // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
                var typeFilter = (TypeFilterComboBox?.SelectedItem as ComboBoxItem)?.Content?.ToString();
                if (!string.IsNullOrEmpty(typeFilter))
                {
                    if (typeFilter == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ")
                    {
                        filteredReports = filteredReports.Where(r => r.IsAutomatic);
                    }
                    else if (typeFilter == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ")
                    {
                        filteredReports = filteredReports.Where(r => !r.IsAutomatic);
                    }
                }

                // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var categoryFilter = (CategoryFilterComboBox?.SelectedItem as ComboBoxItem)?.Content?.ToString();
                if (!string.IsNullOrEmpty(categoryFilter) && categoryFilter != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                {
                    filteredReports = filteredReports.Where(r => r.ReportType?.Name == categoryFilter);
                }

                if (ReportsListBox != null)
                {
                    ReportsListBox.ItemsSource = filteredReports.ToList();
                }
                
                if (ReportsCountText != null)
                {
                    ReportsCountText.Text = $"–û—Ç—á—ë—Ç–æ–≤: {filteredReports.Count()}";
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}";
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            LoadReports();
            UpdateStatistics();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        /// </summary>
        private void ExportButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedReport == null) return;

            try
            {
                var saveDialog = new Microsoft.Win32.SaveFileDialog
                {
                    Title = "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞",
                    Filter = "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)|*.txt|HTML —Ñ–∞–π–ª—ã (*.html)|*.html|JSON —Ñ–∞–π–ª—ã (*.json)|*.json|CSV —Ñ–∞–π–ª—ã (*.csv)|*.csv",
                    DefaultExt = "txt"
                };

                if (saveDialog.ShowDialog() == true)
                {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    if (StatusText != null) StatusText.Text = $"–û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {saveDialog.FileName}";
                    MessageBox.Show($"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {saveDialog.FileName}", "–≠–∫—Å–ø–æ—Ä—Ç", 
                                  MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}";
                MessageBox.Show($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        /// </summary>
        private void UpdateStatistics()
        {
            try
            {
                if (_reportManager == null)
                {
                    return;
                }

                var allReports = _reportManager.GetAllReports();
                if (allReports == null)
                {
                    return;
                }
                
                if (TotalReportsText != null)
                {
                    TotalReportsText.Text = $"–í—Å–µ–≥–æ –æ—Ç—á—ë—Ç–æ–≤: {allReports.Count}";
                }
                
                if (CompletedReportsText != null)
                {
                    CompletedReportsText.Text = $"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {allReports.Count(r => r.Status == "–ó–∞–≤–µ—Ä—à—ë–Ω")}";
                }
                
                if (CustomReportsText != null)
                {
                    CustomReportsText.Text = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {allReports.Count(r => !r.IsAutomatic)}";
                }
                
                if (TodayReportsText != null)
                {
                    TodayReportsText.Text = $"–°–µ–≥–æ–¥–Ω—è: {allReports.Count(r => r.CreatedDate.Date == DateTime.Today)}";
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞
                if (ReportsChartText != null)
                {
                    var reportTypes = allReports.GroupBy(r => r.ReportType?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        .Select(g => $"{g.Key}: {g.Count()}")
                        .ToArray();
                    ReportsChartText.Text = string.Join("\n", reportTypes);
                }
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}";
                }
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        private void LoadSettings()
        {
            try
            {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if (AutoCreateSystemReports != null)
                    AutoCreateSystemReports.IsChecked = true;
                if (AutoCreatePerformanceReports != null)
                    AutoCreatePerformanceReports.IsChecked = false;
                if (AutoCreateSecurityReports != null)
                    AutoCreateSecurityReports.IsChecked = false;
                if (ReportIntervalComboBox != null)
                    ReportIntervalComboBox.SelectedIndex = 0;

                if (AutoExportReports != null)
                    AutoExportReports.IsChecked = false;
                if (IncludeChartsInExport != null)
                    IncludeChartsInExport.IsChecked = true;
                if (CompressExports != null)
                    CompressExports.IsChecked = false;
                if (DefaultExportFormatComboBox != null)
                    DefaultExportFormatComboBox.SelectedIndex = 0;

                if (NotifyOnReportCompletion != null)
                    NotifyOnReportCompletion.IsChecked = true;
                if (NotifyOnReportErrors != null)
                    NotifyOnReportErrors.IsChecked = true;
                if (ShowReportPreview != null)
                    ShowReportPreview.IsChecked = true;
            }
            catch (Exception ex)
            {
                if (StatusText != null)
                {
                    if (StatusText != null) StatusText.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}";
                }
            }
        }
    }
}
